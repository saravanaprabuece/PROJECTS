

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Sep 14 17:16:21 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x7E,2
    25     0000                     
    26                           ; Generated 22/03/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F877A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60     0000                     	;# 
    61     0001                     	;# 
    62     0002                     	;# 
    63     0003                     	;# 
    64     0004                     	;# 
    65     0005                     	;# 
    66     0006                     	;# 
    67     0007                     	;# 
    68     0008                     	;# 
    69     0009                     	;# 
    70     000A                     	;# 
    71     000B                     	;# 
    72     000C                     	;# 
    73     000D                     	;# 
    74     000E                     	;# 
    75     000E                     	;# 
    76     000F                     	;# 
    77     0010                     	;# 
    78     0011                     	;# 
    79     0012                     	;# 
    80     0013                     	;# 
    81     0014                     	;# 
    82     0015                     	;# 
    83     0015                     	;# 
    84     0016                     	;# 
    85     0017                     	;# 
    86     0018                     	;# 
    87     0019                     	;# 
    88     001A                     	;# 
    89     001B                     	;# 
    90     001B                     	;# 
    91     001C                     	;# 
    92     001D                     	;# 
    93     001E                     	;# 
    94     001F                     	;# 
    95     0081                     	;# 
    96     0085                     	;# 
    97     0086                     	;# 
    98     0087                     	;# 
    99     0088                     	;# 
   100     0089                     	;# 
   101     008C                     	;# 
   102     008D                     	;# 
   103     008E                     	;# 
   104     0091                     	;# 
   105     0092                     	;# 
   106     0093                     	;# 
   107     0094                     	;# 
   108     0098                     	;# 
   109     0099                     	;# 
   110     009C                     	;# 
   111     009D                     	;# 
   112     009E                     	;# 
   113     009F                     	;# 
   114     010C                     	;# 
   115     010D                     	;# 
   116     010E                     	;# 
   117     010F                     	;# 
   118     018C                     	;# 
   119     018D                     	;# 
   120     0000                     	;# 
   121     0001                     	;# 
   122     0002                     	;# 
   123     0003                     	;# 
   124     0004                     	;# 
   125     0005                     	;# 
   126     0006                     	;# 
   127     0007                     	;# 
   128     0008                     	;# 
   129     0009                     	;# 
   130     000A                     	;# 
   131     000B                     	;# 
   132     000C                     	;# 
   133     000D                     	;# 
   134     000E                     	;# 
   135     000E                     	;# 
   136     000F                     	;# 
   137     0010                     	;# 
   138     0011                     	;# 
   139     0012                     	;# 
   140     0013                     	;# 
   141     0014                     	;# 
   142     0015                     	;# 
   143     0015                     	;# 
   144     0016                     	;# 
   145     0017                     	;# 
   146     0018                     	;# 
   147     0019                     	;# 
   148     001A                     	;# 
   149     001B                     	;# 
   150     001B                     	;# 
   151     001C                     	;# 
   152     001D                     	;# 
   153     001E                     	;# 
   154     001F                     	;# 
   155     0081                     	;# 
   156     0085                     	;# 
   157     0086                     	;# 
   158     0087                     	;# 
   159     0088                     	;# 
   160     0089                     	;# 
   161     008C                     	;# 
   162     008D                     	;# 
   163     008E                     	;# 
   164     0091                     	;# 
   165     0092                     	;# 
   166     0093                     	;# 
   167     0094                     	;# 
   168     0098                     	;# 
   169     0099                     	;# 
   170     009C                     	;# 
   171     009D                     	;# 
   172     009E                     	;# 
   173     009F                     	;# 
   174     010C                     	;# 
   175     010D                     	;# 
   176     010E                     	;# 
   177     010F                     	;# 
   178     018C                     	;# 
   179     018D                     	;# 
   180                           
   181                           	psect	strings
   182     0003                     __pstrings:
   183     0003                     stringtab:
   184     0003                     __stringtab:
   185     0003                     stringcode:	
   186                           ;	String table - string pointers are 1 byte each
   187                           
   188     0003                     stringdir:
   189     0003  3000               	movlw	high stringdir
   190     0004  008A               	movwf	10
   191     0005  0804               	movf	4,w
   192     0006  0A84               	incf	4,f
   193     0007  0782               	addwf	2,f
   194     0008                     __stringbase:
   195     0008  3400               	retlw	0
   196     0009                     __end_of__stringtab:
   197     0009                     _dpowers:
   198     0009  3401               	retlw	1
   199     000A  3400               	retlw	0
   200     000B  340A               	retlw	10
   201     000C  3400               	retlw	0
   202     000D  3464               	retlw	100
   203     000E  3400               	retlw	0
   204     000F  34E8               	retlw	232
   205     0010  3403               	retlw	3
   206     0011  3410               	retlw	16
   207     0012  3427               	retlw	39
   208     0013                     __end_of_dpowers:
   209     001E                     _ADRESH	set	30
   210     001F                     _ADCON0bits	set	31
   211     0019                     _TXREG	set	25
   212     0018                     _RCSTAbits	set	24
   213     0064                     _TXIF	set	100
   214     009E                     _ADRESL	set	158
   215     009F                     _ADCON1bits	set	159
   216     0099                     _SPBRG	set	153
   217     0098                     _TXSTAbits	set	152
   218     0013                     STR_1:
   219     0013  3453               	retlw	83	;'S'
   220     0014  3465               	retlw	101	;'e'
   221     0015  346E               	retlw	110	;'n'
   222     0016  3473               	retlw	115	;'s'
   223     0017  346F               	retlw	111	;'o'
   224     0018  3472               	retlw	114	;'r'
   225     0019  3420               	retlw	32	;' '
   226     001A  3456               	retlw	86	;'V'
   227     001B  3461               	retlw	97	;'a'
   228     001C  346C               	retlw	108	;'l'
   229     001D  3475               	retlw	117	;'u'
   230     001E  3465               	retlw	101	;'e'
   231     001F  3420               	retlw	32	;' '
   232     0020  343D               	retlw	61	;'='
   233     0021  3420               	retlw	32	;' '
   234     0022  3425               	retlw	37	;'%'
   235     0023  3464               	retlw	100	;'d'
   236     0024  3400               	retlw	0
   237                           
   238                           	psect	cinit
   239     07F3                     start_initialization:	
   240                           ; #config settings
   241                           
   242     07F3                     __initialization:
   243                           
   244                           ; Clear objects allocated to BANK0
   245     07F3  1383               	bcf	3,7	;select IRP bank0
   246     07F4  3020               	movlw	low __pbssBANK0
   247     07F5  0084               	movwf	4
   248     07F6  3052               	movlw	low (__pbssBANK0+50)
   249     07F7  120A  118A  24FF  120A  118A  	fcall	clear_ram0
   250     07FC                     end_of_initialization:	
   251                           ;End of C runtime variable initialization code
   252                           
   253     07FC                     __end_of__initialization:
   254     07FC  0183               	clrf	3
   255     07FD  120A  118A  2E33   	ljmp	_main	;jump to C main() function
   256                           
   257                           	psect	bssBANK0
   258     0020                     __pbssBANK0:
   259     0020                     _buffer:
   260     0020                     	ds	50
   261                           
   262                           	psect	clrtext
   263     04FF                     clear_ram0:	
   264                           ;	Called with FSR containing the base address, and
   265                           ;	W with the last address+1
   266                           
   267     04FF  0064               	clrwdt	;clear the watchdog before getting into this loop
   268     0500                     clrloop0:
   269     0500  0180               	clrf	0	;clear RAM location pointed to by FSR
   270     0501  0A84               	incf	4,f	;increment pointer
   271     0502  0604               	xorwf	4,w	;XOR with final address
   272     0503  1903               	btfsc	3,2	;have we reached the end yet?
   273     0504  3400               	retlw	0	;all done for this memory range, return
   274     0505  0604               	xorwf	4,w	;XOR again to restore value
   275     0506  2D00               	goto	clrloop0	;do the next byte
   276                           
   277                           	psect	cstackCOMMON
   278     0070                     __pcstackCOMMON:
   279     0070                     ?___init_usart:
   280     0070                     ??___init_usart:	
   281                           ; 1 bytes @ 0x0
   282                           
   283     0070                     ?___write_char:	
   284                           ; 1 bytes @ 0x0
   285                           
   286     0070                     ??___write_char:	
   287                           ; 1 bytes @ 0x0
   288                           
   289     0070                     ?___usart_write_ln:	
   290                           ; 1 bytes @ 0x0
   291                           
   292     0070                     ?___init_adc:	
   293                           ; 1 bytes @ 0x0
   294                           
   295     0070                     ??___init_adc:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     0070                     ?_main:	
   299                           ; 1 bytes @ 0x0
   300                           
   301     0070                     ?_strlen:	
   302                           ; 1 bytes @ 0x0
   303                           
   304     0070                     ?___adc_read:	
   305                           ; 2 bytes @ 0x0
   306                           
   307     0070                     ?___lwdiv:	
   308                           ; 2 bytes @ 0x0
   309                           
   310     0070                     ?___aldiv:	
   311                           ; 2 bytes @ 0x0
   312                           
   313     0070                     ___write_char@c:	
   314                           ; 4 bytes @ 0x0
   315                           
   316     0070                     ___adc_read@adc_channel:	
   317                           ; 1 bytes @ 0x0
   318                           
   319     0070                     ___lwdiv@divisor:	
   320                           ; 2 bytes @ 0x0
   321                           
   322     0070                     ___aldiv@divisor:	
   323                           ; 2 bytes @ 0x0
   324                           
   325                           
   326                           ; 4 bytes @ 0x0
   327     0070                     	ds	2
   328     0072                     ??_strlen:
   329     0072                     ??___adc_read:	
   330                           ; 1 bytes @ 0x2
   331                           
   332     0072                     strlen@s:	
   333                           ; 1 bytes @ 0x2
   334                           
   335     0072                     ___lwdiv@dividend:	
   336                           ; 1 bytes @ 0x2
   337                           
   338                           
   339                           ; 2 bytes @ 0x2
   340     0072                     	ds	1
   341     0073                     strlen@cp:
   342                           
   343                           ; 1 bytes @ 0x3
   344     0073                     	ds	1
   345     0074                     ??___usart_write_ln:
   346     0074                     ??___lwdiv:	
   347                           ; 1 bytes @ 0x4
   348                           
   349     0074                     ___adc_read@adc_value:	
   350                           ; 1 bytes @ 0x4
   351                           
   352     0074                     ___lwdiv@quotient:	
   353                           ; 2 bytes @ 0x4
   354                           
   355     0074                     ___aldiv@dividend:	
   356                           ; 2 bytes @ 0x4
   357                           
   358                           
   359                           ; 4 bytes @ 0x4
   360     0074                     	ds	1
   361     0075                     ___usart_write_ln@i:
   362                           
   363                           ; 2 bytes @ 0x5
   364     0075                     	ds	1
   365     0076                     ___lwdiv@counter:
   366                           
   367                           ; 1 bytes @ 0x6
   368     0076                     	ds	1
   369     0077                     ?___lwmod:
   370     0077                     ___usart_write_ln@data:	
   371                           ; 2 bytes @ 0x7
   372                           
   373     0077                     ___lwmod@divisor:	
   374                           ; 1 bytes @ 0x7
   375                           
   376                           
   377                           ; 2 bytes @ 0x7
   378     0077                     	ds	1
   379     0078                     ??___aldiv:
   380                           
   381                           ; 1 bytes @ 0x8
   382     0078                     	ds	1
   383     0079                     ??___set_baud_rate:
   384     0079                     ___lwmod@dividend:	
   385                           ; 1 bytes @ 0x9
   386                           
   387                           
   388                           ; 2 bytes @ 0x9
   389     0079                     	ds	2
   390     007B                     ??___lwmod:
   391     007B                     ___lwmod@counter:	
   392                           ; 1 bytes @ 0xB
   393                           
   394                           
   395                           ; 1 bytes @ 0xB
   396     007B                     	ds	1
   397     007C                     main@adc_value:
   398                           
   399                           ; 2 bytes @ 0xC
   400     007C                     	ds	2
   401                           
   402                           	psect	cstackBANK0
   403     0052                     __pcstackBANK0:
   404     0052                     ?_sprintf:
   405     0052                     sprintf@f:	
   406                           ; 2 bytes @ 0x0
   407                           
   408     0052                     ___aldiv@counter:	
   409                           ; 1 bytes @ 0x0
   410                           
   411                           
   412                           ; 1 bytes @ 0x0
   413     0052                     	ds	1
   414     0053                     ___aldiv@sign:
   415                           
   416                           ; 1 bytes @ 0x1
   417     0053                     	ds	1
   418     0054                     ___aldiv@quotient:
   419                           
   420                           ; 4 bytes @ 0x2
   421     0054                     	ds	1
   422     0055                     ??_sprintf:
   423                           
   424                           ; 1 bytes @ 0x3
   425     0055                     	ds	3
   426     0058                     ?___set_baud_rate:
   427     0058                     sprintf@ap:	
   428                           ; 1 bytes @ 0x6
   429                           
   430     0058                     ___set_baud_rate@baud_rate:	
   431                           ; 1 bytes @ 0x6
   432                           
   433                           
   434                           ; 2 bytes @ 0x6
   435     0058                     	ds	1
   436     0059                     sprintf@flag:
   437                           
   438                           ; 1 bytes @ 0x7
   439     0059                     	ds	1
   440     005A                     sprintf@prec:
   441                           
   442                           ; 1 bytes @ 0x8
   443     005A                     	ds	1
   444     005B                     sprintf@val:
   445                           
   446                           ; 2 bytes @ 0x9
   447     005B                     	ds	2
   448     005D                     sprintf@sp:
   449                           
   450                           ; 1 bytes @ 0xB
   451     005D                     	ds	1
   452     005E                     sprintf@c:
   453                           
   454                           ; 1 bytes @ 0xC
   455     005E                     	ds	1
   456     005F                     ??_main:
   457                           
   458                           ; 1 bytes @ 0xD
   459     005F                     	ds	3
   460                           
   461                           	psect	maintext
   462     0633                     __pmaintext:	
   463 ;;
   464 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   465 ;;
   466 ;; *************** function _main *****************
   467 ;; Defined at:
   468 ;;		line 91 in file "main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  adc_value       2   12[COMMON] int 
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : B00/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   482 ;;      Params:         0       0       0       0       0
   483 ;;      Locals:         2       0       0       0       0
   484 ;;      Temps:          0       3       0       0       0
   485 ;;      Totals:         2       3       0       0       0
   486 ;;Total ram usage:        5 bytes
   487 ;; Hardware stack levels required when called: 2
   488 ;; This function calls:
   489 ;;		___adc_read
   490 ;;		___init_adc
   491 ;;		___init_usart
   492 ;;		___set_baud_rate
   493 ;;		___usart_write_ln
   494 ;;		_sprintf
   495 ;; This function is called by:
   496 ;;		Startup code after reset
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500     0633                     _main:	
   501                           ;psect for function _main
   502                           
   503     0633                     l1125:	
   504                           ;incstack = 0
   505                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   506                           
   507                           
   508                           ;main.c: 92:     __init_adc();
   509     0633  120A  118A  251D  120A  118A  	fcall	___init_adc
   510     0638                     l1127:
   511                           
   512                           ;main.c: 93:     __init_usart();
   513     0638  120A  118A  2511  120A  118A  	fcall	___init_usart
   514     063D                     l1129:
   515                           
   516                           ;main.c: 94:     __set_baud_rate(9600);
   517     063D  3080               	movlw	128
   518     063E  1283               	bcf	3,5	;RP0=0, select bank0
   519     063F  1303               	bcf	3,6	;RP1=0, select bank0
   520     0640  00D8               	movwf	___set_baud_rate@baud_rate
   521     0641  3025               	movlw	37
   522     0642  00D9               	movwf	___set_baud_rate@baud_rate+1
   523     0643  120A  118A  2542  120A  118A  	fcall	___set_baud_rate
   524     0648                     l1131:
   525                           
   526                           ;main.c: 97:         int adc_value = __adc_read(1);
   527     0648  3001               	movlw	1
   528     0649  00F0               	movwf	___adc_read@adc_channel
   529     064A  3000               	movlw	0
   530     064B  00F1               	movwf	___adc_read@adc_channel+1
   531     064C  120A  118A  2560  120A  118A  	fcall	___adc_read
   532     0651  0871               	movf	?___adc_read+1,w
   533     0652  00FD               	movwf	main@adc_value+1
   534     0653  0870               	movf	?___adc_read,w
   535     0654  00FC               	movwf	main@adc_value
   536     0655                     l1133:
   537                           
   538                           ;main.c: 98:         sprintf(buffer, "Sensor Value = %d", adc_value);
   539     0655  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   540     0656  1283               	bcf	3,5	;RP0=0, select bank0
   541     0657  1303               	bcf	3,6	;RP1=0, select bank0
   542     0658  00D2               	movwf	sprintf@f
   543     0659  087D               	movf	main@adc_value+1,w
   544     065A  00D4               	movwf	?_sprintf+2
   545     065B  087C               	movf	main@adc_value,w
   546     065C  00D3               	movwf	?_sprintf+1
   547     065D  3020               	movlw	(low (_buffer| 0))& (0+255)
   548     065E  120A  118A  2719  120A  118A  	fcall	_sprintf
   549     0663                     l1135:
   550                           
   551                           ;main.c: 99:         __usart_write_ln(buffer);
   552     0663  3020               	movlw	(low (_buffer| 0))& (0+255)
   553     0664  120A  118A  2588  120A  118A  	fcall	___usart_write_ln
   554     0669                     l1137:
   555                           
   556                           ;main.c: 100:         _delay((unsigned long)((1000)*(16000000/4000.0)));
   557     0669  3015               	movlw	21
   558     066A  1283               	bcf	3,5	;RP0=0, select bank0
   559     066B  1303               	bcf	3,6	;RP1=0, select bank0
   560     066C  00E1               	movwf	??_main+2
   561     066D  304B               	movlw	75
   562     066E  00E0               	movwf	??_main+1
   563     066F  30BD               	movlw	189
   564     0670  00DF               	movwf	??_main
   565     0671                     u697:
   566     0671  0BDF               	decfsz	??_main,f
   567     0672  2E71               	goto	u697
   568     0673  0BE0               	decfsz	??_main+1,f
   569     0674  2E71               	goto	u697
   570     0675  0BE1               	decfsz	??_main+2,f
   571     0676  2E71               	goto	u697
   572     0677  2E78               	nop2
   573     0678  2E48               	goto	l1131
   574     0679  120A  118A  2800   	ljmp	start
   575     067C                     __end_of_main:
   576                           
   577                           	psect	text1
   578     0719                     __ptext1:	
   579 ;; *************** function _sprintf *****************
   580 ;; Defined at:
   581 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
   582 ;; Parameters:    Size  Location     Type
   583 ;;  sp              1    wreg     PTR unsigned char 
   584 ;;		 -> buffer(50), 
   585 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   586 ;;		 -> STR_1(18), 
   587 ;; Auto vars:     Size  Location     Type
   588 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   589 ;;		 -> buffer(50), 
   590 ;;  tmpval          4    0        struct .
   591 ;;  val             2    9[BANK0 ] unsigned int 
   592 ;;  cp              2    0        PTR const unsigned char 
   593 ;;  len             2    0        unsigned int 
   594 ;;  c               1   12[BANK0 ] unsigned char 
   595 ;;  prec            1    8[BANK0 ] char 
   596 ;;  flag            1    7[BANK0 ] unsigned char 
   597 ;;  ap              1    6[BANK0 ] PTR void [1]
   598 ;;		 -> ?_sprintf(2), 
   599 ;; Return value:  Size  Location     Type
   600 ;;                  2    0[BANK0 ] int 
   601 ;; Registers used:
   602 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   603 ;; Tracked objects:
   604 ;;		On entry : 0/0
   605 ;;		On exit  : 0/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   608 ;;      Params:         0       3       0       0       0
   609 ;;      Locals:         0       7       0       0       0
   610 ;;      Temps:          0       3       0       0       0
   611 ;;      Totals:         0      13       0       0       0
   612 ;;Total ram usage:       13 bytes
   613 ;; Hardware stack levels used: 1
   614 ;; Hardware stack levels required when called: 1
   615 ;; This function calls:
   616 ;;		___lwdiv
   617 ;;		___lwmod
   618 ;; This function is called by:
   619 ;;		_main
   620 ;; This function uses a non-reentrant model
   621 ;;
   622                           
   623     0719                     _sprintf:	
   624                           ;psect for function _sprintf
   625                           
   626                           
   627                           ;incstack = 0
   628                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   629                           ;sprintf@sp stored from wreg
   630     0719  1283               	bcf	3,5	;RP0=0, select bank0
   631     071A  1303               	bcf	3,6	;RP1=0, select bank0
   632     071B  00DD               	movwf	sprintf@sp
   633     071C                     l1061:
   634                           
   635                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   636     071C  3053               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   637     071D  00D8               	movwf	sprintf@ap
   638                           
   639                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   640     071E  2FDE               	goto	l1115
   641     071F                     l1063:
   642                           
   643                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   644     071F  3025               	movlw	37
   645     0720  065E               	xorwf	sprintf@c,w
   646     0721  1903               	btfsc	3,2
   647     0722  2F24               	goto	u621
   648     0723  2F25               	goto	u620
   649     0724                     u621:
   650     0724  2F2F               	goto	l1069
   651     0725                     u620:
   652     0725                     l1065:
   653                           
   654                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   655     0725  085D               	movf	sprintf@sp,w
   656     0726  0084               	movwf	4
   657     0727  085E               	movf	sprintf@c,w
   658     0728  1383               	bcf	3,7	;select IRP bank0
   659     0729  0080               	movwf	0
   660     072A                     l1067:
   661     072A  3001               	movlw	1
   662     072B  00FF               	movwf	btemp+1
   663     072C  087F               	movf	btemp+1,w
   664     072D  07DD               	addwf	sprintf@sp,f
   665                           
   666                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 559:    continue;
   667     072E  2FDE               	goto	l1115
   668     072F                     l1069:
   669                           
   670                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   671     072F  01D9               	clrf	sprintf@flag
   672     0730                     l1073:	
   673                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   674                           
   675     0730  3001               	movlw	1
   676     0731  07D2               	addwf	sprintf@f,f
   677     0732  30FF               	movlw	-1
   678     0733  0752               	addwf	sprintf@f,w
   679     0734  0084               	movwf	4
   680     0735  120A  118A  2003  120A  118A  	fcall	stringdir
   681     073A  00DE               	movwf	sprintf@c
   682     073B  00D5               	movwf	??_sprintf
   683     073C  01D6               	clrf	??_sprintf+1
   684                           
   685                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   686                           ; Switch size 1, requested type "simple"
   687                           ; Number of cases is 1, Range of values is 0 to 0
   688                           ; switch strategies available:
   689                           ; Name         Instructions Cycles
   690                           ; simple_byte            4     3 (average)
   691                           ; direct_byte           11     8 (fixed)
   692                           ; jumptable            260     6 (fixed)
   693                           ;	Chosen strategy is simple_byte
   694     073D  0856               	movf	??_sprintf+1,w
   695     073E  3A00               	xorlw	0	; case 0
   696     073F  1903               	skipnz
   697     0740  2F42               	goto	l1159
   698     0741  2FDE               	goto	l1115
   699     0742                     l1159:
   700                           
   701                           ; Switch size 1, requested type "simple"
   702                           ; Number of cases is 3, Range of values is 0 to 105
   703                           ; switch strategies available:
   704                           ; Name         Instructions Cycles
   705                           ; simple_byte           10     6 (average)
   706                           ; jumptable            260     6 (fixed)
   707                           ;	Chosen strategy is simple_byte
   708     0742  0855               	movf	??_sprintf,w
   709     0743  3A00               	xorlw	0	; case 0
   710     0744  1903               	skipnz
   711     0745  2FEE               	goto	l1117
   712     0746  3A64               	xorlw	100	; case 100
   713     0747  1903               	skipnz
   714     0748  2F4D               	goto	l1075
   715     0749  3A0D               	xorlw	13	; case 105
   716     074A  1903               	skipnz
   717     074B  2F4D               	goto	l1075
   718     074C  2FDE               	goto	l1115
   719     074D                     l1075:
   720                           
   721                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   722     074D  0858               	movf	sprintf@ap,w
   723     074E  0084               	movwf	4
   724     074F  1383               	bcf	3,7	;select IRP bank0
   725     0750  0800               	movf	0,w
   726     0751  00DB               	movwf	sprintf@val
   727     0752  0A84               	incf	4,f
   728     0753  0800               	movf	0,w
   729     0754  00DC               	movwf	sprintf@val+1
   730     0755                     l1077:
   731     0755  3002               	movlw	2
   732     0756  00FF               	movwf	btemp+1
   733     0757  087F               	movf	btemp+1,w
   734     0758  07D8               	addwf	sprintf@ap,f
   735     0759                     l1079:
   736                           
   737                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
   738     0759  1FDC               	btfss	sprintf@val+1,7
   739     075A  2F5C               	goto	u631
   740     075B  2F5D               	goto	u630
   741     075C                     u631:
   742     075C  2F66               	goto	l1085
   743     075D                     u630:
   744     075D                     l1081:
   745                           
   746                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
   747     075D  3003               	movlw	3
   748     075E  00FF               	movwf	btemp+1
   749     075F  087F               	movf	btemp+1,w
   750     0760  04D9               	iorwf	sprintf@flag,f
   751     0761                     l1083:
   752                           
   753                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
   754     0761  09DB               	comf	sprintf@val,f
   755     0762  09DC               	comf	sprintf@val+1,f
   756     0763  0ADB               	incf	sprintf@val,f
   757     0764  1903               	skipnz
   758     0765  0ADC               	incf	sprintf@val+1,f
   759     0766                     l1085:
   760                           
   761                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   762     0766  01DE               	clrf	sprintf@c
   763     0767  0ADE               	incf	sprintf@c,f
   764     0768                     l1091:
   765                           
   766                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   767     0768  085E               	movf	sprintf@c,w
   768     0769  00D5               	movwf	??_sprintf
   769     076A  0755               	addwf	??_sprintf,w
   770     076B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   771     076C  0084               	movwf	4
   772     076D  120A  118A  2003  120A  118A  	fcall	stringdir
   773     0772  00D6               	movwf	??_sprintf+1
   774     0773  120A  118A  2003  120A  118A  	fcall	stringdir
   775     0778  00D7               	movwf	??_sprintf+2
   776     0779  0857               	movf	??_sprintf+2,w
   777     077A  025C               	subwf	sprintf@val+1,w
   778     077B  1D03               	skipz
   779     077C  2F7F               	goto	u645
   780     077D  0856               	movf	??_sprintf+1,w
   781     077E  025B               	subwf	sprintf@val,w
   782     077F                     u645:
   783     077F  1803               	skipnc
   784     0780  2F82               	goto	u641
   785     0781  2F83               	goto	u640
   786     0782                     u641:
   787     0782  2F84               	goto	l1095
   788     0783                     u640:
   789     0783  2F8E               	goto	l1099
   790     0784                     l1095:
   791     0784  3001               	movlw	1
   792     0785  00FF               	movwf	btemp+1
   793     0786  087F               	movf	btemp+1,w
   794     0787  07DE               	addwf	sprintf@c,f
   795     0788                     l1097:
   796     0788  3005               	movlw	5
   797     0789  065E               	xorwf	sprintf@c,w
   798     078A  1D03               	btfss	3,2
   799     078B  2F8D               	goto	u651
   800     078C  2F8E               	goto	u650
   801     078D                     u651:
   802     078D  2F68               	goto	l1091
   803     078E                     u650:
   804     078E                     l1099:
   805                           
   806                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
   807     078E  0859               	movf	sprintf@flag,w
   808     078F  3903               	andlw	3
   809     0790  1903               	btfsc	3,2
   810     0791  2F93               	goto	u661
   811     0792  2F94               	goto	u660
   812     0793                     u661:
   813     0793  2F9D               	goto	l1105
   814     0794                     u660:
   815     0794                     l1101:
   816                           
   817                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
   818     0794  085D               	movf	sprintf@sp,w
   819     0795  0084               	movwf	4
   820     0796  302D               	movlw	45
   821     0797  1383               	bcf	3,7	;select IRP bank0
   822     0798  0080               	movwf	0
   823     0799                     l1103:
   824     0799  3001               	movlw	1
   825     079A  00FF               	movwf	btemp+1
   826     079B  087F               	movf	btemp+1,w
   827     079C  07DD               	addwf	sprintf@sp,f
   828     079D                     l1105:
   829                           
   830                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   831     079D  085E               	movf	sprintf@c,w
   832     079E  00DA               	movwf	sprintf@prec
   833                           
   834                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   835     079F  2FD5               	goto	l1113
   836     07A0                     l1107:
   837                           
   838                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
   839     07A0  300A               	movlw	10
   840     07A1  00F7               	movwf	___lwmod@divisor
   841     07A2  3000               	movlw	0
   842     07A3  00F8               	movwf	___lwmod@divisor+1
   843     07A4  085A               	movf	sprintf@prec,w
   844     07A5  00D5               	movwf	??_sprintf
   845     07A6  0755               	addwf	??_sprintf,w
   846     07A7  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   847     07A8  0084               	movwf	4
   848     07A9  120A  118A  2003  120A  118A  	fcall	stringdir
   849     07AE  00F0               	movwf	___lwdiv@divisor
   850     07AF  120A  118A  2003  120A  118A  	fcall	stringdir
   851     07B4  00F1               	movwf	___lwdiv@divisor+1
   852     07B5  085C               	movf	sprintf@val+1,w
   853     07B6  00F3               	movwf	___lwdiv@dividend+1
   854     07B7  085B               	movf	sprintf@val,w
   855     07B8  00F2               	movwf	___lwdiv@dividend
   856     07B9  120A  118A  25EF  120A  118A  	fcall	___lwdiv
   857     07BE  0871               	movf	?___lwdiv+1,w
   858     07BF  00FA               	movwf	___lwmod@dividend+1
   859     07C0  0870               	movf	?___lwdiv,w
   860     07C1  00F9               	movwf	___lwmod@dividend
   861     07C2  120A  118A  25B5  120A  118A  	fcall	___lwmod
   862     07C7  0877               	movf	?___lwmod,w
   863     07C8  3E30               	addlw	48
   864     07C9  1283               	bcf	3,5	;RP0=0, select bank0
   865     07CA  1303               	bcf	3,6	;RP1=0, select bank0
   866     07CB  00DE               	movwf	sprintf@c
   867     07CC                     l1109:
   868                           
   869                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
   870     07CC  085D               	movf	sprintf@sp,w
   871     07CD  0084               	movwf	4
   872     07CE  085E               	movf	sprintf@c,w
   873     07CF  1383               	bcf	3,7	;select IRP bank0
   874     07D0  0080               	movwf	0
   875     07D1                     l1111:
   876     07D1  3001               	movlw	1
   877     07D2  00FF               	movwf	btemp+1
   878     07D3  087F               	movf	btemp+1,w
   879     07D4  07DD               	addwf	sprintf@sp,f
   880     07D5                     l1113:
   881                           
   882                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   883     07D5  30FF               	movlw	255
   884     07D6  00FF               	movwf	btemp+1
   885     07D7  087F               	movf	btemp+1,w
   886     07D8  07DA               	addwf	sprintf@prec,f
   887     07D9  0A5A               	incf	sprintf@prec,w
   888     07DA  1D03               	btfss	3,2
   889     07DB  2FDD               	goto	u671
   890     07DC  2FDE               	goto	u670
   891     07DD                     u671:
   892     07DD  2FA0               	goto	l1107
   893     07DE                     u670:
   894     07DE                     l1115:
   895                           
   896                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   897     07DE  3001               	movlw	1
   898     07DF  07D2               	addwf	sprintf@f,f
   899     07E0  30FF               	movlw	-1
   900     07E1  0752               	addwf	sprintf@f,w
   901     07E2  0084               	movwf	4
   902     07E3  120A  118A  2003  120A  118A  	fcall	stringdir
   903     07E8  00DE               	movwf	sprintf@c
   904     07E9  085E               	movf	sprintf@c,w
   905     07EA  1D03               	btfss	3,2
   906     07EB  2FED               	goto	u681
   907     07EC  2FEE               	goto	u680
   908     07ED                     u681:
   909     07ED  2F1F               	goto	l1063
   910     07EE                     u680:
   911     07EE                     l1117:
   912                           
   913                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
   914     07EE  085D               	movf	sprintf@sp,w
   915     07EF  0084               	movwf	4
   916     07F0  1383               	bcf	3,7	;select IRP bank0
   917     07F1  0180               	clrf	0
   918     07F2                     l171:
   919     07F2  0008               	return
   920     07F3                     __end_of_sprintf:
   921                           
   922                           	psect	text2
   923     05B5                     __ptext2:	
   924 ;; *************** function ___lwmod *****************
   925 ;; Defined at:
   926 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;  divisor         2    7[COMMON] unsigned int 
   929 ;;  dividend        2    9[COMMON] unsigned int 
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  counter         1   11[COMMON] unsigned char 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  2    7[COMMON] unsigned int 
   934 ;; Registers used:
   935 ;;		wreg, status,2, status,0, btemp+1
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   941 ;;      Params:         4       0       0       0       0
   942 ;;      Locals:         1       0       0       0       0
   943 ;;      Temps:          0       0       0       0       0
   944 ;;      Totals:         5       0       0       0       0
   945 ;;Total ram usage:        5 bytes
   946 ;; Hardware stack levels used: 1
   947 ;; This function calls:
   948 ;;		Nothing
   949 ;; This function is called by:
   950 ;;		_sprintf
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954     05B5                     ___lwmod:	
   955                           ;psect for function ___lwmod
   956                           
   957     05B5                     l1005:	
   958                           ;incstack = 0
   959                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
   960                           
   961     05B5  0877               	movf	___lwmod@divisor,w
   962     05B6  0478               	iorwf	___lwmod@divisor+1,w
   963     05B7  1903               	btfsc	3,2
   964     05B8  2DBA               	goto	u541
   965     05B9  2DBB               	goto	u540
   966     05BA                     u541:
   967     05BA  2DEA               	goto	l1023
   968     05BB                     u540:
   969     05BB                     l1007:
   970     05BB  01FB               	clrf	___lwmod@counter
   971     05BC  0AFB               	incf	___lwmod@counter,f
   972     05BD  2DC9               	goto	l1013
   973     05BE                     l1009:
   974     05BE  3001               	movlw	1
   975     05BF                     u555:
   976     05BF  1003               	clrc
   977     05C0  0DF7               	rlf	___lwmod@divisor,f
   978     05C1  0DF8               	rlf	___lwmod@divisor+1,f
   979     05C2  3EFF               	addlw	-1
   980     05C3  1D03               	skipz
   981     05C4  2DBF               	goto	u555
   982     05C5                     l1011:
   983     05C5  3001               	movlw	1
   984     05C6  00FF               	movwf	btemp+1
   985     05C7  087F               	movf	btemp+1,w
   986     05C8  07FB               	addwf	___lwmod@counter,f
   987     05C9                     l1013:
   988     05C9  1FF8               	btfss	___lwmod@divisor+1,7
   989     05CA  2DCC               	goto	u561
   990     05CB  2DCD               	goto	u560
   991     05CC                     u561:
   992     05CC  2DBE               	goto	l1009
   993     05CD                     u560:
   994     05CD                     l1015:
   995     05CD  0878               	movf	___lwmod@divisor+1,w
   996     05CE  027A               	subwf	___lwmod@dividend+1,w
   997     05CF  1D03               	skipz
   998     05D0  2DD3               	goto	u575
   999     05D1  0877               	movf	___lwmod@divisor,w
  1000     05D2  0279               	subwf	___lwmod@dividend,w
  1001     05D3                     u575:
  1002     05D3  1C03               	skipc
  1003     05D4  2DD6               	goto	u571
  1004     05D5  2DD7               	goto	u570
  1005     05D6                     u571:
  1006     05D6  2DDD               	goto	l1019
  1007     05D7                     u570:
  1008     05D7                     l1017:
  1009     05D7  0877               	movf	___lwmod@divisor,w
  1010     05D8  02F9               	subwf	___lwmod@dividend,f
  1011     05D9  0878               	movf	___lwmod@divisor+1,w
  1012     05DA  1C03               	skipc
  1013     05DB  03FA               	decf	___lwmod@dividend+1,f
  1014     05DC  02FA               	subwf	___lwmod@dividend+1,f
  1015     05DD                     l1019:
  1016     05DD  3001               	movlw	1
  1017     05DE                     u585:
  1018     05DE  1003               	clrc
  1019     05DF  0CF8               	rrf	___lwmod@divisor+1,f
  1020     05E0  0CF7               	rrf	___lwmod@divisor,f
  1021     05E1  3EFF               	addlw	-1
  1022     05E2  1D03               	skipz
  1023     05E3  2DDE               	goto	u585
  1024     05E4                     l1021:
  1025     05E4  3001               	movlw	1
  1026     05E5  02FB               	subwf	___lwmod@counter,f
  1027     05E6  1D03               	btfss	3,2
  1028     05E7  2DE9               	goto	u591
  1029     05E8  2DEA               	goto	u590
  1030     05E9                     u591:
  1031     05E9  2DCD               	goto	l1015
  1032     05EA                     u590:
  1033     05EA                     l1023:
  1034     05EA  087A               	movf	___lwmod@dividend+1,w
  1035     05EB  00F8               	movwf	?___lwmod+1
  1036     05EC  0879               	movf	___lwmod@dividend,w
  1037     05ED  00F7               	movwf	?___lwmod
  1038     05EE                     l457:
  1039     05EE  0008               	return
  1040     05EF                     __end_of___lwmod:
  1041                           
  1042                           	psect	text3
  1043     05EF                     __ptext3:	
  1044 ;; *************** function ___lwdiv *****************
  1045 ;; Defined at:
  1046 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;  divisor         2    0[COMMON] unsigned int 
  1049 ;;  dividend        2    2[COMMON] unsigned int 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  quotient        2    4[COMMON] unsigned int 
  1052 ;;  counter         1    6[COMMON] unsigned char 
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  2    0[COMMON] unsigned int 
  1055 ;; Registers used:
  1056 ;;		wreg, status,2, status,0, btemp+1
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1062 ;;      Params:         4       0       0       0       0
  1063 ;;      Locals:         3       0       0       0       0
  1064 ;;      Temps:          0       0       0       0       0
  1065 ;;      Totals:         7       0       0       0       0
  1066 ;;Total ram usage:        7 bytes
  1067 ;; Hardware stack levels used: 1
  1068 ;; This function calls:
  1069 ;;		Nothing
  1070 ;; This function is called by:
  1071 ;;		_sprintf
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075     05EF                     ___lwdiv:	
  1076                           ;psect for function ___lwdiv
  1077                           
  1078     05EF                     l979:	
  1079                           ;incstack = 0
  1080                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1081                           
  1082     05EF  01F4               	clrf	___lwdiv@quotient
  1083     05F0  01F5               	clrf	___lwdiv@quotient+1
  1084     05F1                     l981:
  1085     05F1  0870               	movf	___lwdiv@divisor,w
  1086     05F2  0471               	iorwf	___lwdiv@divisor+1,w
  1087     05F3  1903               	btfsc	3,2
  1088     05F4  2DF6               	goto	u471
  1089     05F5  2DF7               	goto	u470
  1090     05F6                     u471:
  1091     05F6  2E2E               	goto	l1001
  1092     05F7                     u470:
  1093     05F7                     l983:
  1094     05F7  01F6               	clrf	___lwdiv@counter
  1095     05F8  0AF6               	incf	___lwdiv@counter,f
  1096     05F9  2E05               	goto	l989
  1097     05FA                     l985:
  1098     05FA  3001               	movlw	1
  1099     05FB                     u485:
  1100     05FB  1003               	clrc
  1101     05FC  0DF0               	rlf	___lwdiv@divisor,f
  1102     05FD  0DF1               	rlf	___lwdiv@divisor+1,f
  1103     05FE  3EFF               	addlw	-1
  1104     05FF  1D03               	skipz
  1105     0600  2DFB               	goto	u485
  1106     0601                     l987:
  1107     0601  3001               	movlw	1
  1108     0602  00FF               	movwf	btemp+1
  1109     0603  087F               	movf	btemp+1,w
  1110     0604  07F6               	addwf	___lwdiv@counter,f
  1111     0605                     l989:
  1112     0605  1FF1               	btfss	___lwdiv@divisor+1,7
  1113     0606  2E08               	goto	u491
  1114     0607  2E09               	goto	u490
  1115     0608                     u491:
  1116     0608  2DFA               	goto	l985
  1117     0609                     u490:
  1118     0609                     l991:
  1119     0609  3001               	movlw	1
  1120     060A                     u505:
  1121     060A  1003               	clrc
  1122     060B  0DF4               	rlf	___lwdiv@quotient,f
  1123     060C  0DF5               	rlf	___lwdiv@quotient+1,f
  1124     060D  3EFF               	addlw	-1
  1125     060E  1D03               	skipz
  1126     060F  2E0A               	goto	u505
  1127     0610  0871               	movf	___lwdiv@divisor+1,w
  1128     0611  0273               	subwf	___lwdiv@dividend+1,w
  1129     0612  1D03               	skipz
  1130     0613  2E16               	goto	u515
  1131     0614  0870               	movf	___lwdiv@divisor,w
  1132     0615  0272               	subwf	___lwdiv@dividend,w
  1133     0616                     u515:
  1134     0616  1C03               	skipc
  1135     0617  2E19               	goto	u511
  1136     0618  2E1A               	goto	u510
  1137     0619                     u511:
  1138     0619  2E21               	goto	l997
  1139     061A                     u510:
  1140     061A                     l993:
  1141     061A  0870               	movf	___lwdiv@divisor,w
  1142     061B  02F2               	subwf	___lwdiv@dividend,f
  1143     061C  0871               	movf	___lwdiv@divisor+1,w
  1144     061D  1C03               	skipc
  1145     061E  03F3               	decf	___lwdiv@dividend+1,f
  1146     061F  02F3               	subwf	___lwdiv@dividend+1,f
  1147     0620                     l995:
  1148     0620  1474               	bsf	___lwdiv@quotient,0
  1149     0621                     l997:
  1150     0621  3001               	movlw	1
  1151     0622                     u525:
  1152     0622  1003               	clrc
  1153     0623  0CF1               	rrf	___lwdiv@divisor+1,f
  1154     0624  0CF0               	rrf	___lwdiv@divisor,f
  1155     0625  3EFF               	addlw	-1
  1156     0626  1D03               	skipz
  1157     0627  2E22               	goto	u525
  1158     0628                     l999:
  1159     0628  3001               	movlw	1
  1160     0629  02F6               	subwf	___lwdiv@counter,f
  1161     062A  1D03               	btfss	3,2
  1162     062B  2E2D               	goto	u531
  1163     062C  2E2E               	goto	u530
  1164     062D                     u531:
  1165     062D  2E09               	goto	l991
  1166     062E                     u530:
  1167     062E                     l1001:
  1168     062E  0875               	movf	___lwdiv@quotient+1,w
  1169     062F  00F1               	movwf	?___lwdiv+1
  1170     0630  0874               	movf	___lwdiv@quotient,w
  1171     0631  00F0               	movwf	?___lwdiv
  1172     0632                     l447:
  1173     0632  0008               	return
  1174     0633                     __end_of___lwdiv:
  1175                           
  1176                           	psect	text4
  1177     0588                     __ptext4:	
  1178 ;; *************** function ___usart_write_ln *****************
  1179 ;; Defined at:
  1180 ;;		line 61 in file "main.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  data            1    wreg     PTR unsigned char 
  1183 ;;		 -> buffer(50), 
  1184 ;; Auto vars:     Size  Location     Type
  1185 ;;  data            1    7[COMMON] PTR unsigned char 
  1186 ;;		 -> buffer(50), 
  1187 ;;  i               2    5[COMMON] int 
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  1    wreg      void 
  1190 ;; Registers used:
  1191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1197 ;;      Params:         0       0       0       0       0
  1198 ;;      Locals:         3       0       0       0       0
  1199 ;;      Temps:          1       0       0       0       0
  1200 ;;      Totals:         4       0       0       0       0
  1201 ;;Total ram usage:        4 bytes
  1202 ;; Hardware stack levels used: 1
  1203 ;; Hardware stack levels required when called: 1
  1204 ;; This function calls:
  1205 ;;		___write_char
  1206 ;;		_strlen
  1207 ;; This function is called by:
  1208 ;;		_main
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212     0588                     ___usart_write_ln:	
  1213                           ;psect for function ___usart_write_ln
  1214                           
  1215                           
  1216                           ;incstack = 0
  1217                           ; Regs used in ___usart_write_ln: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1218                           ;___usart_write_ln@data stored from wreg
  1219     0588  00F7               	movwf	___usart_write_ln@data
  1220     0589                     l1031:
  1221                           
  1222                           ;main.c: 62:     int i;;main.c: 63:     for(i=0; i<(strlen(data)); i++) {
  1223     0589  01F5               	clrf	___usart_write_ln@i
  1224     058A  01F6               	clrf	___usart_write_ln@i+1
  1225     058B  2D9E               	goto	l1037
  1226     058C                     l1033:
  1227                           
  1228                           ;main.c: 64:         __write_char(data[i]);
  1229     058C  0875               	movf	___usart_write_ln@i,w
  1230     058D  0777               	addwf	___usart_write_ln@data,w
  1231     058E  00F4               	movwf	??___usart_write_ln
  1232     058F  0874               	movf	??___usart_write_ln,w
  1233     0590  0084               	movwf	4
  1234     0591  1383               	bcf	3,7	;select IRP bank0
  1235     0592  0800               	movf	0,w
  1236     0593  120A  118A  2507  120A  118A  	fcall	___write_char
  1237     0598                     l1035:
  1238                           
  1239                           ;main.c: 65:     }
  1240     0598  3001               	movlw	1
  1241     0599  07F5               	addwf	___usart_write_ln@i,f
  1242     059A  1803               	skipnc
  1243     059B  0AF6               	incf	___usart_write_ln@i+1,f
  1244     059C  3000               	movlw	0
  1245     059D  07F6               	addwf	___usart_write_ln@i+1,f
  1246     059E                     l1037:
  1247     059E  0877               	movf	___usart_write_ln@data,w
  1248     059F  120A  118A  252B  120A  118A  	fcall	_strlen
  1249     05A4  0871               	movf	?_strlen+1,w
  1250     05A5  0276               	subwf	___usart_write_ln@i+1,w
  1251     05A6  1D03               	skipz
  1252     05A7  2DAA               	goto	u605
  1253     05A8  0870               	movf	?_strlen,w
  1254     05A9  0275               	subwf	___usart_write_ln@i,w
  1255     05AA                     u605:
  1256     05AA  1C03               	skipc
  1257     05AB  2DAD               	goto	u601
  1258     05AC  2DAE               	goto	u600
  1259     05AD                     u601:
  1260     05AD  2D8C               	goto	l1033
  1261     05AE                     u600:
  1262     05AE                     l1039:
  1263                           
  1264                           ;main.c: 66:     __write_char('\r');
  1265     05AE  300D               	movlw	13
  1266     05AF  120A  118A  2507  120A  118A  	fcall	___write_char
  1267     05B4                     l44:
  1268     05B4  0008               	return
  1269     05B5                     __end_of___usart_write_ln:
  1270                           
  1271                           	psect	text5
  1272     052B                     __ptext5:	
  1273 ;; *************** function _strlen *****************
  1274 ;; Defined at:
  1275 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strlen.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  s               1    wreg     PTR const unsigned char 
  1278 ;;		 -> buffer(50), 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  s               1    2[COMMON] PTR const unsigned char 
  1281 ;;		 -> buffer(50), 
  1282 ;;  cp              1    3[COMMON] PTR const unsigned char 
  1283 ;;		 -> buffer(50), 
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  2    0[COMMON] unsigned int 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1293 ;;      Params:         2       0       0       0       0
  1294 ;;      Locals:         2       0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0
  1296 ;;      Totals:         4       0       0       0       0
  1297 ;;Total ram usage:        4 bytes
  1298 ;; Hardware stack levels used: 1
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		___usart_write_ln
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306     052B                     _strlen:	
  1307                           ;psect for function _strlen
  1308                           
  1309                           
  1310                           ;incstack = 0
  1311                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+btemp+1]
  1312                           ;strlen@s stored from wreg
  1313     052B  00F2               	movwf	strlen@s
  1314     052C                     l927:
  1315     052C  0872               	movf	strlen@s,w
  1316     052D  00F3               	movwf	strlen@cp
  1317     052E  2D33               	goto	l931
  1318     052F                     l929:
  1319     052F  3001               	movlw	1
  1320     0530  00FF               	movwf	btemp+1
  1321     0531  087F               	movf	btemp+1,w
  1322     0532  07F3               	addwf	strlen@cp,f
  1323     0533                     l931:
  1324     0533  0873               	movf	strlen@cp,w
  1325     0534  0084               	movwf	4
  1326     0535  1383               	bcf	3,7	;select IRP bank0
  1327     0536  0800               	movf	0,w
  1328     0537  1D03               	btfss	3,2
  1329     0538  2D3A               	goto	u361
  1330     0539  2D3B               	goto	u360
  1331     053A                     u361:
  1332     053A  2D2F               	goto	l929
  1333     053B                     u360:
  1334     053B                     l933:
  1335     053B  0872               	movf	strlen@s,w
  1336     053C  0273               	subwf	strlen@cp,w
  1337     053D  00F0               	movwf	?_strlen
  1338     053E  01F1               	clrf	?_strlen+1
  1339     053F  1BF0               	btfsc	?_strlen,7
  1340     0540  03F1               	decf	?_strlen+1,f
  1341     0541                     l629:
  1342     0541  0008               	return
  1343     0542                     __end_of_strlen:
  1344                           
  1345                           	psect	text6
  1346     0507                     __ptext6:	
  1347 ;; *************** function ___write_char *****************
  1348 ;; Defined at:
  1349 ;;		line 54 in file "main.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;  c               1    wreg     unsigned char 
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;  c               1    0[COMMON] unsigned char 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1363 ;;      Params:         0       0       0       0       0
  1364 ;;      Locals:         1       0       0       0       0
  1365 ;;      Temps:          0       0       0       0       0
  1366 ;;      Totals:         1       0       0       0       0
  1367 ;;Total ram usage:        1 bytes
  1368 ;; Hardware stack levels used: 1
  1369 ;; This function calls:
  1370 ;;		Nothing
  1371 ;; This function is called by:
  1372 ;;		___usart_write_ln
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376     0507                     ___write_char:	
  1377                           ;psect for function ___write_char
  1378                           
  1379                           
  1380                           ;incstack = 0
  1381                           ; Regs used in ___write_char: [wreg]
  1382                           ;___write_char@c stored from wreg
  1383     0507  00F0               	movwf	___write_char@c
  1384     0508                     l923:
  1385     0508                     l35:	
  1386                           ;main.c: 57:     }
  1387                           
  1388                           
  1389                           ;main.c: 55:     while(!TXIF) {
  1390     0508  1283               	bcf	3,5	;RP0=0, select bank0
  1391     0509  1303               	bcf	3,6	;RP1=0, select bank0
  1392     050A  1E0C               	btfss	12,4	;volatile
  1393     050B  2D0D               	goto	u351
  1394     050C  2D0E               	goto	u350
  1395     050D                     u351:
  1396     050D  2D08               	goto	l35
  1397     050E                     u350:
  1398     050E                     l925:
  1399                           
  1400                           ;main.c: 58:     TXREG = c;
  1401     050E  0870               	movf	___write_char@c,w
  1402     050F  0099               	movwf	25	;volatile
  1403     0510                     l38:
  1404     0510  0008               	return
  1405     0511                     __end_of___write_char:
  1406                           
  1407                           	psect	text7
  1408     0542                     __ptext7:	
  1409 ;; *************** function ___set_baud_rate *****************
  1410 ;; Defined at:
  1411 ;;		line 47 in file "main.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  baud_rate       2    6[BANK0 ] int 
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;		None
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  1    wreg      void 
  1418 ;; Registers used:
  1419 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1425 ;;      Params:         0       2       0       0       0
  1426 ;;      Locals:         0       0       0       0       0
  1427 ;;      Temps:          0       0       0       0       0
  1428 ;;      Totals:         0       2       0       0       0
  1429 ;;Total ram usage:        2 bytes
  1430 ;; Hardware stack levels used: 1
  1431 ;; Hardware stack levels required when called: 1
  1432 ;; This function calls:
  1433 ;;		___aldiv
  1434 ;; This function is called by:
  1435 ;;		_main
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439     0542                     ___set_baud_rate:	
  1440                           ;psect for function ___set_baud_rate
  1441                           
  1442     0542                     l1029:	
  1443                           ;incstack = 0
  1444                           ; Regs used in ___set_baud_rate: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1445                           
  1446                           
  1447                           ;main.c: 51:     SPBRG = ((16000000 / 16) / baud_rate) - 1;
  1448     0542  1283               	bcf	3,5	;RP0=0, select bank0
  1449     0543  1303               	bcf	3,6	;RP1=0, select bank0
  1450     0544  0858               	movf	___set_baud_rate@baud_rate,w
  1451     0545  00F0               	movwf	___aldiv@divisor
  1452     0546  0859               	movf	___set_baud_rate@baud_rate+1,w
  1453     0547  00F1               	movwf	___aldiv@divisor+1
  1454     0548  3000               	movlw	0
  1455     0549  1BF1               	btfsc	___aldiv@divisor+1,7
  1456     054A  30FF               	movlw	255
  1457     054B  00F2               	movwf	___aldiv@divisor+2
  1458     054C  00F3               	movwf	___aldiv@divisor+3
  1459     054D  3000               	movlw	0
  1460     054E  00F7               	movwf	___aldiv@dividend+3
  1461     054F  300F               	movlw	15
  1462     0550  00F6               	movwf	___aldiv@dividend+2
  1463     0551  3042               	movlw	66
  1464     0552  00F5               	movwf	___aldiv@dividend+1
  1465     0553  3040               	movlw	64
  1466     0554  00F4               	movwf	___aldiv@dividend
  1467     0555  120A  118A  267C  120A  118A  	fcall	___aldiv
  1468     055A  0870               	movf	?___aldiv,w
  1469     055B  3EFF               	addlw	255
  1470     055C  1683               	bsf	3,5	;RP0=1, select bank1
  1471     055D  1303               	bcf	3,6	;RP1=0, select bank1
  1472     055E  0099               	movwf	25	;volatile
  1473     055F                     l32:
  1474     055F  0008               	return
  1475     0560                     __end_of___set_baud_rate:
  1476                           
  1477                           	psect	text8
  1478     067C                     __ptext8:	
  1479 ;; *************** function ___aldiv *****************
  1480 ;; Defined at:
  1481 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\aldiv.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  divisor         4    0[COMMON] long 
  1484 ;;  dividend        4    4[COMMON] long 
  1485 ;; Auto vars:     Size  Location     Type
  1486 ;;  quotient        4    2[BANK0 ] long 
  1487 ;;  sign            1    1[BANK0 ] unsigned char 
  1488 ;;  counter         1    0[BANK0 ] unsigned char 
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  4    0[COMMON] long 
  1491 ;; Registers used:
  1492 ;;		wreg, status,2, status,0, btemp+1
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1498 ;;      Params:         8       0       0       0       0
  1499 ;;      Locals:         0       6       0       0       0
  1500 ;;      Temps:          1       0       0       0       0
  1501 ;;      Totals:         9       6       0       0       0
  1502 ;;Total ram usage:       15 bytes
  1503 ;; Hardware stack levels used: 1
  1504 ;; This function calls:
  1505 ;;		Nothing
  1506 ;; This function is called by:
  1507 ;;		___set_baud_rate
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511     067C                     ___aldiv:	
  1512                           ;psect for function ___aldiv
  1513                           
  1514     067C                     l937:	
  1515                           ;incstack = 0
  1516                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  1517                           
  1518     067C  1283               	bcf	3,5	;RP0=0, select bank0
  1519     067D  1303               	bcf	3,6	;RP1=0, select bank0
  1520     067E  01D3               	clrf	___aldiv@sign
  1521     067F                     l939:
  1522     067F  1FF3               	btfss	___aldiv@divisor+3,7
  1523     0680  2E82               	goto	u371
  1524     0681  2E83               	goto	u370
  1525     0682                     u371:
  1526     0682  2E90               	goto	l240
  1527     0683                     u370:
  1528     0683                     l941:
  1529     0683  09F0               	comf	___aldiv@divisor,f
  1530     0684  09F1               	comf	___aldiv@divisor+1,f
  1531     0685  09F2               	comf	___aldiv@divisor+2,f
  1532     0686  09F3               	comf	___aldiv@divisor+3,f
  1533     0687  0AF0               	incf	___aldiv@divisor,f
  1534     0688  1903               	skipnz
  1535     0689  0AF1               	incf	___aldiv@divisor+1,f
  1536     068A  1903               	skipnz
  1537     068B  0AF2               	incf	___aldiv@divisor+2,f
  1538     068C  1903               	skipnz
  1539     068D  0AF3               	incf	___aldiv@divisor+3,f
  1540     068E  01D3               	clrf	___aldiv@sign
  1541     068F  0AD3               	incf	___aldiv@sign,f
  1542     0690                     l240:
  1543     0690  1FF7               	btfss	___aldiv@dividend+3,7
  1544     0691  2E93               	goto	u381
  1545     0692  2E94               	goto	u380
  1546     0693                     u381:
  1547     0693  2EA3               	goto	l947
  1548     0694                     u380:
  1549     0694                     l943:
  1550     0694  09F4               	comf	___aldiv@dividend,f
  1551     0695  09F5               	comf	___aldiv@dividend+1,f
  1552     0696  09F6               	comf	___aldiv@dividend+2,f
  1553     0697  09F7               	comf	___aldiv@dividend+3,f
  1554     0698  0AF4               	incf	___aldiv@dividend,f
  1555     0699  1903               	skipnz
  1556     069A  0AF5               	incf	___aldiv@dividend+1,f
  1557     069B  1903               	skipnz
  1558     069C  0AF6               	incf	___aldiv@dividend+2,f
  1559     069D  1903               	skipnz
  1560     069E  0AF7               	incf	___aldiv@dividend+3,f
  1561     069F                     l945:
  1562     069F  3001               	movlw	1
  1563     06A0  00FF               	movwf	btemp+1
  1564     06A1  087F               	movf	btemp+1,w
  1565     06A2  06D3               	xorwf	___aldiv@sign,f
  1566     06A3                     l947:
  1567     06A3  3000               	movlw	0
  1568     06A4  00D7               	movwf	___aldiv@quotient+3
  1569     06A5  3000               	movlw	0
  1570     06A6  00D6               	movwf	___aldiv@quotient+2
  1571     06A7  3000               	movlw	0
  1572     06A8  00D5               	movwf	___aldiv@quotient+1
  1573     06A9  3000               	movlw	0
  1574     06AA  00D4               	movwf	___aldiv@quotient
  1575     06AB                     l949:
  1576     06AB  0873               	movf	___aldiv@divisor+3,w
  1577     06AC  0472               	iorwf	___aldiv@divisor+2,w
  1578     06AD  0471               	iorwf	___aldiv@divisor+1,w
  1579     06AE  0470               	iorwf	___aldiv@divisor,w
  1580     06AF  1903               	skipnz
  1581     06B0  2EB2               	goto	u391
  1582     06B1  2EB3               	goto	u390
  1583     06B2                     u391:
  1584     06B2  2F00               	goto	l971
  1585     06B3                     u390:
  1586     06B3                     l951:
  1587     06B3  01D2               	clrf	___aldiv@counter
  1588     06B4  0AD2               	incf	___aldiv@counter,f
  1589     06B5  2EC3               	goto	l957
  1590     06B6                     l953:
  1591     06B6  3001               	movlw	1
  1592     06B7  00F8               	movwf	??___aldiv
  1593     06B8                     u405:
  1594     06B8  1003               	clrc
  1595     06B9  0DF0               	rlf	___aldiv@divisor,f
  1596     06BA  0DF1               	rlf	___aldiv@divisor+1,f
  1597     06BB  0DF2               	rlf	___aldiv@divisor+2,f
  1598     06BC  0DF3               	rlf	___aldiv@divisor+3,f
  1599     06BD  0BF8               	decfsz	??___aldiv,f
  1600     06BE  2EB8               	goto	u405
  1601     06BF                     l955:
  1602     06BF  3001               	movlw	1
  1603     06C0  00FF               	movwf	btemp+1
  1604     06C1  087F               	movf	btemp+1,w
  1605     06C2  07D2               	addwf	___aldiv@counter,f
  1606     06C3                     l957:
  1607     06C3  1FF3               	btfss	___aldiv@divisor+3,7
  1608     06C4  2EC6               	goto	u411
  1609     06C5  2EC7               	goto	u410
  1610     06C6                     u411:
  1611     06C6  2EB6               	goto	l953
  1612     06C7                     u410:
  1613     06C7                     l959:
  1614     06C7  3001               	movlw	1
  1615     06C8  00F8               	movwf	??___aldiv
  1616     06C9                     u425:
  1617     06C9  1003               	clrc
  1618     06CA  0DD4               	rlf	___aldiv@quotient,f
  1619     06CB  0DD5               	rlf	___aldiv@quotient+1,f
  1620     06CC  0DD6               	rlf	___aldiv@quotient+2,f
  1621     06CD  0DD7               	rlf	___aldiv@quotient+3,f
  1622     06CE  0BF8               	decfsz	??___aldiv,f
  1623     06CF  2EC9               	goto	u425
  1624     06D0                     l961:
  1625     06D0  0873               	movf	___aldiv@divisor+3,w
  1626     06D1  0277               	subwf	___aldiv@dividend+3,w
  1627     06D2  1D03               	skipz
  1628     06D3  2EDE               	goto	u435
  1629     06D4  0872               	movf	___aldiv@divisor+2,w
  1630     06D5  0276               	subwf	___aldiv@dividend+2,w
  1631     06D6  1D03               	skipz
  1632     06D7  2EDE               	goto	u435
  1633     06D8  0871               	movf	___aldiv@divisor+1,w
  1634     06D9  0275               	subwf	___aldiv@dividend+1,w
  1635     06DA  1D03               	skipz
  1636     06DB  2EDE               	goto	u435
  1637     06DC  0870               	movf	___aldiv@divisor,w
  1638     06DD  0274               	subwf	___aldiv@dividend,w
  1639     06DE                     u435:
  1640     06DE  1C03               	skipc
  1641     06DF  2EE1               	goto	u431
  1642     06E0  2EE2               	goto	u430
  1643     06E1                     u431:
  1644     06E1  2EF1               	goto	l967
  1645     06E2                     u430:
  1646     06E2                     l963:
  1647     06E2  0870               	movf	___aldiv@divisor,w
  1648     06E3  02F4               	subwf	___aldiv@dividend,f
  1649     06E4  0871               	movf	___aldiv@divisor+1,w
  1650     06E5  1C03               	skipc
  1651     06E6  0F71               	incfsz	___aldiv@divisor+1,w
  1652     06E7  02F5               	subwf	___aldiv@dividend+1,f
  1653     06E8  0872               	movf	___aldiv@divisor+2,w
  1654     06E9  1C03               	skipc
  1655     06EA  0F72               	incfsz	___aldiv@divisor+2,w
  1656     06EB  02F6               	subwf	___aldiv@dividend+2,f
  1657     06EC  0873               	movf	___aldiv@divisor+3,w
  1658     06ED  1C03               	skipc
  1659     06EE  0F73               	incfsz	___aldiv@divisor+3,w
  1660     06EF  02F7               	subwf	___aldiv@dividend+3,f
  1661     06F0                     l965:
  1662     06F0  1454               	bsf	___aldiv@quotient,0
  1663     06F1                     l967:
  1664     06F1  3001               	movlw	1
  1665     06F2                     u445:
  1666     06F2  1003               	clrc
  1667     06F3  0CF3               	rrf	___aldiv@divisor+3,f
  1668     06F4  0CF2               	rrf	___aldiv@divisor+2,f
  1669     06F5  0CF1               	rrf	___aldiv@divisor+1,f
  1670     06F6  0CF0               	rrf	___aldiv@divisor,f
  1671     06F7  3EFF               	addlw	-1
  1672     06F8  1D03               	skipz
  1673     06F9  2EF2               	goto	u445
  1674     06FA                     l969:
  1675     06FA  3001               	movlw	1
  1676     06FB  02D2               	subwf	___aldiv@counter,f
  1677     06FC  1D03               	btfss	3,2
  1678     06FD  2EFF               	goto	u451
  1679     06FE  2F00               	goto	u450
  1680     06FF                     u451:
  1681     06FF  2EC7               	goto	l959
  1682     0700                     u450:
  1683     0700                     l971:
  1684     0700  0853               	movf	___aldiv@sign,w
  1685     0701  1903               	btfsc	3,2
  1686     0702  2F04               	goto	u461
  1687     0703  2F05               	goto	u460
  1688     0704                     u461:
  1689     0704  2F10               	goto	l975
  1690     0705                     u460:
  1691     0705                     l973:
  1692     0705  09D4               	comf	___aldiv@quotient,f
  1693     0706  09D5               	comf	___aldiv@quotient+1,f
  1694     0707  09D6               	comf	___aldiv@quotient+2,f
  1695     0708  09D7               	comf	___aldiv@quotient+3,f
  1696     0709  0AD4               	incf	___aldiv@quotient,f
  1697     070A  1903               	skipnz
  1698     070B  0AD5               	incf	___aldiv@quotient+1,f
  1699     070C  1903               	skipnz
  1700     070D  0AD6               	incf	___aldiv@quotient+2,f
  1701     070E  1903               	skipnz
  1702     070F  0AD7               	incf	___aldiv@quotient+3,f
  1703     0710                     l975:
  1704     0710  0857               	movf	___aldiv@quotient+3,w
  1705     0711  00F3               	movwf	?___aldiv+3
  1706     0712  0856               	movf	___aldiv@quotient+2,w
  1707     0713  00F2               	movwf	?___aldiv+2
  1708     0714  0855               	movf	___aldiv@quotient+1,w
  1709     0715  00F1               	movwf	?___aldiv+1
  1710     0716  0854               	movf	___aldiv@quotient,w
  1711     0717  00F0               	movwf	?___aldiv
  1712     0718                     l250:
  1713     0718  0008               	return
  1714     0719                     __end_of___aldiv:
  1715                           
  1716                           	psect	text9
  1717     0511                     __ptext9:	
  1718 ;; *************** function ___init_usart *****************
  1719 ;; Defined at:
  1720 ;;		line 18 in file "main.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;		None
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		None
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1734 ;;      Params:         0       0       0       0       0
  1735 ;;      Locals:         0       0       0       0       0
  1736 ;;      Temps:          0       0       0       0       0
  1737 ;;      Totals:         0       0       0       0       0
  1738 ;;Total ram usage:        0 bytes
  1739 ;; Hardware stack levels used: 1
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_main
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747     0511                     ___init_usart:	
  1748                           ;psect for function ___init_usart
  1749                           
  1750     0511                     l1027:	
  1751                           ;incstack = 0
  1752                           ; Regs used in ___init_usart: []
  1753                           
  1754                           
  1755                           ;main.c: 28:     TXSTAbits.TX9 = 0;
  1756     0511  1683               	bsf	3,5	;RP0=1, select bank1
  1757     0512  1303               	bcf	3,6	;RP1=0, select bank1
  1758     0513  1318               	bcf	24,6	;volatile
  1759                           
  1760                           ;main.c: 29:     TXSTAbits.TXEN = 1;
  1761     0514  1698               	bsf	24,5	;volatile
  1762                           
  1763                           ;main.c: 30:     TXSTAbits.SYNC = 0;
  1764     0515  1218               	bcf	24,4	;volatile
  1765                           
  1766                           ;main.c: 31:     TXSTAbits.BRGH = 1;
  1767     0516  1518               	bsf	24,2	;volatile
  1768                           
  1769                           ;main.c: 42:     RCSTAbits.SPEN = 1;
  1770     0517  1283               	bcf	3,5	;RP0=0, select bank0
  1771     0518  1303               	bcf	3,6	;RP1=0, select bank0
  1772     0519  1798               	bsf	24,7	;volatile
  1773                           
  1774                           ;main.c: 43:     RCSTAbits.RX9 = 0;
  1775     051A  1318               	bcf	24,6	;volatile
  1776                           
  1777                           ;main.c: 44:     RCSTAbits.CREN = 1;
  1778     051B  1618               	bsf	24,4	;volatile
  1779     051C                     l29:
  1780     051C  0008               	return
  1781     051D                     __end_of___init_usart:
  1782                           
  1783                           	psect	text10
  1784     051D                     __ptext10:	
  1785 ;; *************** function ___init_adc *****************
  1786 ;; Defined at:
  1787 ;;		line 69 in file "main.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;		None
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;		None
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1801 ;;      Params:         0       0       0       0       0
  1802 ;;      Locals:         0       0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0
  1804 ;;      Totals:         0       0       0       0       0
  1805 ;;Total ram usage:        0 bytes
  1806 ;; Hardware stack levels used: 1
  1807 ;; This function calls:
  1808 ;;		Nothing
  1809 ;; This function is called by:
  1810 ;;		_main
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814     051D                     ___init_adc:	
  1815                           ;psect for function ___init_adc
  1816                           
  1817     051D                     l1041:	
  1818                           ;incstack = 0
  1819                           ; Regs used in ___init_adc: [wreg+status,2+status,0]
  1820                           
  1821                           
  1822                           ;main.c: 70:     ADCON0bits.ADCS = 0b00;
  1823     051D  303F               	movlw	-193
  1824     051E  1283               	bcf	3,5	;RP0=0, select bank0
  1825     051F  1303               	bcf	3,6	;RP1=0, select bank0
  1826     0520  059F               	andwf	31,f	;volatile
  1827                           
  1828                           ;main.c: 71:     ADCON0bits.CHS = 0b000;
  1829     0521  30C7               	movlw	-57
  1830     0522  059F               	andwf	31,f	;volatile
  1831     0523                     l1043:
  1832                           
  1833                           ;main.c: 72:     ADCON0bits.ADON = 0;
  1834     0523  101F               	bcf	31,0	;volatile
  1835     0524                     l1045:
  1836                           
  1837                           ;main.c: 74:     ADCON1bits.ADFM = 1;
  1838     0524  1683               	bsf	3,5	;RP0=1, select bank1
  1839     0525  1303               	bcf	3,6	;RP1=0, select bank1
  1840     0526  179F               	bsf	31,7	;volatile
  1841     0527                     l1047:
  1842                           
  1843                           ;main.c: 75:     ADCON1bits.ADCS2 = 0;
  1844     0527  131F               	bcf	31,6	;volatile
  1845                           
  1846                           ;main.c: 76:     ADCON1bits.PCFG = 0b0000;
  1847     0528  30F0               	movlw	-16
  1848     0529  059F               	andwf	31,f	;volatile
  1849     052A                     l47:
  1850     052A  0008               	return
  1851     052B                     __end_of___init_adc:
  1852                           
  1853                           	psect	text11
  1854     0560                     __ptext11:	
  1855 ;; *************** function ___adc_read *****************
  1856 ;; Defined at:
  1857 ;;		line 79 in file "main.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;  adc_channel     2    0[COMMON] int 
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;  adc_value       2    4[COMMON] int 
  1862 ;; Return value:  Size  Location     Type
  1863 ;;                  2    0[COMMON] int 
  1864 ;; Registers used:
  1865 ;;		wreg, status,2, status,0
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1871 ;;      Params:         2       0       0       0       0
  1872 ;;      Locals:         2       0       0       0       0
  1873 ;;      Temps:          2       0       0       0       0
  1874 ;;      Totals:         6       0       0       0       0
  1875 ;;Total ram usage:        6 bytes
  1876 ;; Hardware stack levels used: 1
  1877 ;; This function calls:
  1878 ;;		Nothing
  1879 ;; This function is called by:
  1880 ;;		_main
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884     0560                     ___adc_read:	
  1885                           ;psect for function ___adc_read
  1886                           
  1887     0560                     l1049:	
  1888                           ;incstack = 0
  1889                           ; Regs used in ___adc_read: [wreg+status,2+status,0]
  1890                           
  1891                           
  1892                           ;main.c: 80:     ADCON0bits.ADON = 1;
  1893     0560  1283               	bcf	3,5	;RP0=0, select bank0
  1894     0561  1303               	bcf	3,6	;RP1=0, select bank0
  1895     0562  141F               	bsf	31,0	;volatile
  1896     0563                     l1051:
  1897                           
  1898                           ;main.c: 81:     ADCON0bits.CHS = adc_channel;
  1899     0563  0870               	movf	___adc_read@adc_channel,w
  1900     0564  00F2               	movwf	??___adc_read
  1901     0565  0DF2               	rlf	??___adc_read,f
  1902     0566  0DF2               	rlf	??___adc_read,f
  1903     0567  0DF2               	rlf	??___adc_read,f
  1904     0568  081F               	movf	31,w	;volatile
  1905     0569  0672               	xorwf	??___adc_read,w
  1906     056A  39C7               	andlw	-57
  1907     056B  0672               	xorwf	??___adc_read,w
  1908     056C  009F               	movwf	31	;volatile
  1909     056D                     l1053:
  1910                           
  1911                           ;main.c: 82:     _delay((unsigned long)((10)*(16000000/4000.0)));
  1912     056D  3034               	movlw	52
  1913     056E  00F3               	movwf	??___adc_read+1
  1914     056F  30F1               	movlw	241
  1915     0570  00F2               	movwf	??___adc_read
  1916     0571                     u707:
  1917     0571  0BF2               	decfsz	??___adc_read,f
  1918     0572  2D71               	goto	u707
  1919     0573  0BF3               	decfsz	??___adc_read+1,f
  1920     0574  2D71               	goto	u707
  1921     0575  2D76               	nop2
  1922     0576                     l1055:
  1923                           
  1924                           ;main.c: 83:     ADCON0bits.GO = 1;
  1925     0576  1283               	bcf	3,5	;RP0=0, select bank0
  1926     0577  1303               	bcf	3,6	;RP1=0, select bank0
  1927     0578  151F               	bsf	31,2	;volatile
  1928     0579                     l50:	
  1929                           ;main.c: 86:     }
  1930                           
  1931                           
  1932                           ;main.c: 84:     while(ADCON0bits.GO_DONE == 1) {
  1933     0579  191F               	btfsc	31,2	;volatile
  1934     057A  2D7C               	goto	u611
  1935     057B  2D7D               	goto	u610
  1936     057C                     u611:
  1937     057C  2D79               	goto	l50
  1938     057D                     u610:
  1939     057D                     l1057:
  1940                           
  1941                           ;main.c: 87:     int adc_value = (ADRESH << 8) + (ADRESL);
  1942     057D  081E               	movf	30,w	;volatile
  1943     057E  00F5               	movwf	___adc_read@adc_value+1
  1944     057F  1683               	bsf	3,5	;RP0=1, select bank1
  1945     0580  1303               	bcf	3,6	;RP1=0, select bank1
  1946     0581  081E               	movf	30,w	;volatile
  1947     0582  00F4               	movwf	___adc_read@adc_value
  1948                           
  1949                           ;main.c: 88:     return adc_value;
  1950     0583  0875               	movf	___adc_read@adc_value+1,w
  1951     0584  00F1               	movwf	?___adc_read+1
  1952     0585  0874               	movf	___adc_read@adc_value,w
  1953     0586  00F0               	movwf	?___adc_read
  1954     0587                     l53:
  1955     0587  0008               	return
  1956     0588                     __end_of___adc_read:
  1957     007E                     btemp	set	126	;btemp
  1958     007E                     wtemp0	set	126
  1959                           
  1960                           	psect	idloc
  1961                           
  1962                           ;Config register IDLOC0 @ 0x2000
  1963                           ;	unspecified, using default values
  1964     2000                     	org	8192
  1965     2000  3FFF               	dw	16383
  1966                           
  1967                           ;Config register IDLOC1 @ 0x2001
  1968                           ;	unspecified, using default values
  1969     2001                     	org	8193
  1970     2001  3FFF               	dw	16383
  1971                           
  1972                           ;Config register IDLOC2 @ 0x2002
  1973                           ;	unspecified, using default values
  1974     2002                     	org	8194
  1975     2002  3FFF               	dw	16383
  1976                           
  1977                           ;Config register IDLOC3 @ 0x2003
  1978                           ;	unspecified, using default values
  1979     2003                     	org	8195
  1980     2003  3FFF               	dw	16383
  1981                           
  1982                           	psect	config
  1983                           
  1984                           ;Config register CONFIG @ 0x2007
  1985                           ;	Oscillator Selection bits
  1986                           ;	FOSC = HS, HS oscillator
  1987                           ;	Watchdog Timer Enable bit
  1988                           ;	WDTE = OFF, WDT disabled
  1989                           ;	Power-up Timer Enable bit
  1990                           ;	PWRTE = OFF, PWRT disabled
  1991                           ;	Brown-out Reset Enable bit
  1992                           ;	BOREN = ON, BOR enabled
  1993                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1994                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1995                           ;	Data EEPROM Memory Code Protection bit
  1996                           ;	CPD = OFF, Data EEPROM code protection off
  1997                           ;	Flash Program Memory Write Enable bits
  1998                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1999                           ;	In-Circuit Debugger Mode bit
  2000                           ;	DEBUG = 0x1, unprogrammed default
  2001                           ;	Flash Program Memory Code Protection bit
  2002                           ;	CP = OFF, Code protection off
  2003     2007                     	org	8199
  2004     2007  3F7A               	dw	16250

Data Sizes:
    Strings     18
    Constant    10
    Data        0
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     16      66
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 50
		 -> buffer(BANK0[50]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 50
		 -> buffer(BANK0[50]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 50
		 -> buffer(BANK0[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    __usart_write_ln@data	PTR unsigned char  size(1) Largest target is 50
		 -> buffer(BANK0[50]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___usart_write_ln->_strlen
    ___set_baud_rate->___aldiv

Critical Paths under _main in BANK0

    _main->_sprintf
    ___set_baud_rate->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2173
                                             12 COMMON     2     2      0
                                             13 BANK0      3     3      0
                         ___adc_read
                         ___init_adc
                       ___init_usart
                    ___set_baud_rate
                   ___usart_write_ln
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___usart_write_ln                                     4     4      0     268
                                              4 COMMON     4     4      0
                       ___write_char
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     123
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___write_char                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___set_baud_rate                                      2     0      2     550
                                              6 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) ___init_usart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___init_adc                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___adc_read                                           6     4      2     121
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___adc_read
   ___init_adc
   ___init_usart
   ___set_baud_rate
     ___aldiv
   ___usart_write_ln
     ___write_char
     _strlen
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      50       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      42       5       82.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      50      12        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Sep 14 17:16:21 2024

                        pc 0002                         l32 055F                         l50 0579  
                       l35 0508                         l44 05B4                         l53 0587  
                       l29 051C                         l38 0510                         l47 052A  
                       fsr 0004                        l240 0690                        l250 0718  
                      l171 07F2                        l447 0632                        l457 05EE  
                      l629 0541                        l923 0508                        l931 0533  
                      l941 0683                        l925 050E                        l933 053B  
                      l951 06B3                        l943 0694                        l927 052C  
                      l961 06D0                        l953 06B6                        l945 069F  
                      l937 067C                        l929 052F                        l963 06E2  
                      l955 06BF                        l971 0700                        l947 06A3  
                      l939 067F                        l973 0705                        l965 06F0  
                      l957 06C3                        l949 06AB                        l981 05F1  
                      l975 0710                        l967 06F1                        l959 06C7  
                      l991 0609                        l983 05F7                        l969 06FA  
                      l993 061A                        l985 05FA                        l995 0620  
                      l987 0601                        l979 05EF                        l997 0621  
                      l989 0605                        l999 0628                        u410 06C7  
                      u411 06C6                        u405 06B8                        u430 06E2  
                      u350 050E                        u510 061A                        u431 06E1  
                      u351 050D                        u511 0619                        u360 053B  
                      u600 05AE                        u425 06C9                        u361 053A  
                      u601 05AD                        u505 060A                        u610 057D  
                      u450 0700                        u370 0683                        u530 062E  
                      u611 057C                        u451 06FF                        u435 06DE  
                      u371 0682                        u531 062D                        u515 0616  
                      u460 0705                        u380 0694                        u540 05BB  
                      u620 0725                        u461 0704                        u445 06F2  
                      u381 0693                        u605 05AA                        u525 0622  
                      u541 05BA                        u621 0724                        u390 06B3  
                      u470 05F7                        u630 075D                        u391 06B2  
                      u471 05F6                        u631 075C                        u560 05CD  
                      u640 0783                        u561 05CC                        u641 0782  
                      u490 0609                        u570 05D7                        u650 078E  
                      u707 0571                        u491 0608                        u571 05D6  
                      u555 05BF                        u651 078D                        u660 0794  
                      u485 05FB                        u661 0793                        u645 077F  
                      u590 05EA                        u670 07DE                        u591 05E9  
                      u575 05D3                        u671 07DD                        u680 07EE  
                      u585 05DE                        u681 07ED                        u697 0671  
                      fsr0 0004                        indf 0000                       l1001 062E  
                     l1011 05C5                       l1021 05E4                       l1013 05C9  
                     l1005 05B5                       l1101 0794                       l1031 0589  
                     l1015 05CD                       l1007 05BB                       l1023 05EA  
                     l1111 07D1                       l1103 0799                       l1041 051D  
                     l1033 058C                       l1017 05D7                       l1009 05BE  
                     l1113 07D5                       l1105 079D                       l1051 0563  
                     l1043 0523                       l1027 0511                       l1035 0598  
                     l1019 05DD                       l1107 07A0                       l1115 07DE  
                     l1131 0648                       l1053 056D                       l1045 0524  
                     l1029 0542                       l1037 059E                       l1109 07CC  
                     l1117 07EE                       l1061 071C                       l1133 0655  
                     l1125 0633                       l1055 0576                       l1047 0527  
                     l1039 05AE                       l1063 071F                       l1135 0663  
                     l1127 0638                       l1057 057D                       l1049 0560  
                     l1081 075D                       l1073 0730                       l1065 0725  
                     l1137 0669                       l1129 063D                       l1091 0768  
                     l1083 0761                       l1075 074D                       l1067 072A  
                     l1085 0766                       l1077 0755                       l1069 072F  
                     l1095 0784                       l1079 0759                       l1159 0742  
                     l1097 0788                       l1099 078E                       STR_1 0013  
                     _TXIF 0064                       _main 0633                       btemp 007E  
 __end_of___usart_write_ln 05B5                       start 0000               ___init_usart 0511  
          __end_of___aldiv 0719                      ?_main 0070            __end_of___lwdiv 0633  
          __end_of___lwmod 05EF                      _SPBRG 0099                      _TXREG 0019  
          __end_of_dpowers 0013                      pclath 000A                      status 0003  
                    wtemp0 007E            __end_of_sprintf 07F3              main@adc_value 007C  
         ?___set_baud_rate 0058            __initialization 07F3               __end_of_main 067C  
                   ??_main 005F                     _ADRESH 001E                     _ADRESL 009E  
             ___write_char 0507                  ??___aldiv 0078                  ??___lwdiv 0074  
                ??___lwmod 007B                     _buffer 0020                     _strlen 052B  
               ___adc_read 0560                  ??_sprintf 0055  ___set_baud_rate@baud_rate 0058  
     ___adc_read@adc_value 0074    __end_of__initialization 07FC                 ___init_adc 051D  
           __pcstackCOMMON 0070         ___usart_write_ln@i 0075                 __pbssBANK0 0020  
        ?___usart_write_ln 0070      ___usart_write_ln@data 0077                 __pmaintext 0633  
       ??___usart_write_ln 0074                    ?_strlen 0070                ?___adc_read 0070  
               __stringtab 0003                ?___init_adc 0070                    ___aldiv 067C  
                  ___lwdiv 05EF                    ___lwmod 05B5                    __ptext1 0719  
                  __ptext2 05B5                    __ptext3 05EF                    __ptext4 0588  
                  __ptext5 052B                    __ptext6 0507                    __ptext7 0542  
                  __ptext8 067C                    __ptext9 0511                    _dpowers 0009  
         ___aldiv@dividend 0074                    _sprintf 0719                    clrloop0 0500  
     end_of_initialization 07FC                  _RCSTAbits 0018           ___aldiv@quotient 0054  
                  strlen@s 0072                  _TXSTAbits 0098             __end_of_strlen 0542  
      start_initialization 07F3              ?___init_usart 0070                   ??_strlen 0072  
             ??___adc_read 0072                  ___latbits 0002              __pcstackBANK0 0052  
        ??___set_baud_rate 0079                sprintf@flag 0059                sprintf@prec 005A  
           ??___init_usart 0070               ??___init_adc 0070           ___lwdiv@dividend 0072  
                 ?___aldiv 0070         __end_of___adc_read 0588                   ?___lwdiv 0070  
                 ?___lwmod 0077                  __pstrings 0003           ___lwdiv@quotient 0074  
       __end_of___init_adc 052B                   ?_sprintf 0052            ___aldiv@divisor 0070  
          ___aldiv@counter 0052                  clear_ram0 04FF              ?___write_char 0070  
               _ADCON0bits 001F                __stringbase 0008                 _ADCON1bits 009F  
           ___write_char@c 0070             ??___write_char 0070         __end_of__stringtab 0009  
         ___usart_write_ln 0588                 sprintf@val 005B       __end_of___init_usart 051D  
          ___lwdiv@divisor 0070            ___lwdiv@counter 0076                   __ptext10 051D  
                 __ptext11 0560            ___set_baud_rate 0542                  sprintf@ap 0058  
                sprintf@sp 005D           ___lwmod@dividend 0079                  stringcode 0003  
                 sprintf@c 005E                   sprintf@f 0052            ___lwmod@divisor 0077  
     __end_of___write_char 0511                   strlen@cp 0073            ___lwmod@counter 007B  
                 stringdir 0003                   stringtab 0003               ___aldiv@sign 0053  
   ___adc_read@adc_channel 0070    __end_of___set_baud_rate 0560  
